// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package main

import (
	"context"
)

const createAtmMessage = `-- name: CreateAtmMessage :one
INSERT INTO atm_message (
  mti
) VALUES (
  ?
)
RETURNING id, mti
`

func (q *Queries) CreateAtmMessage(ctx context.Context, mti string) (AtmMessage, error) {
	row := q.db.QueryRowContext(ctx, createAtmMessage, mti)
	var i AtmMessage
	err := row.Scan(&i.ID, &i.Mti)
	return i, err
}

const getAtmMessage = `-- name: GetAtmMessage :one
SELECT id, mti FROM atm_message
WHERE id = ? LIMIT 1
`

func (q *Queries) GetAtmMessage(ctx context.Context, id int64) (AtmMessage, error) {
	row := q.db.QueryRowContext(ctx, getAtmMessage, id)
	var i AtmMessage
	err := row.Scan(&i.ID, &i.Mti)
	return i, err
}

const listAtmMessages = `-- name: ListAtmMessages :many
SELECT id, mti FROM atm_message
ORDER BY id
`

func (q *Queries) ListAtmMessages(ctx context.Context) ([]AtmMessage, error) {
	rows, err := q.db.QueryContext(ctx, listAtmMessages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AtmMessage
	for rows.Next() {
		var i AtmMessage
		if err := rows.Scan(&i.ID, &i.Mti); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
